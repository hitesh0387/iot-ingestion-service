plugins {
    id 'org.springframework.boot' version '2.5.10'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group 'com.hnp.iot'
version '1.0-SNAPSHOT'
targetCompatibility = '17'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

// Defining the versions for maven dependencies
ext {
    lombokVersion = '1.18.22'
    jacksonVersion = '2.13.2'
    liquibaseVersion = '4.9.0'
    junitVersion = '5.4.0'
    cucmberVersion = '7.2.3'
    junitVintageVersion = '5.8.2'
}

sourceSets {
    // Configuring a separate source set for the Cucumber integration test
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integ-test/java')
        }
        resources {
            srcDir file('src/integ-test/resources')
        }
    }
}

configurations {
    integrationTestCompileOnly.extendsFrom compileOnly
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
}

dependencies {
    // Spring-boot dependencies
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.kafka:spring-kafka"

    // Jackson dependencies
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // Lombok dependencies
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.postgresql:postgresql"

    // Liquibase dependency
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

    // junit-dependencies
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.kafka:spring-kafka-test"
    testImplementation "org.junit:junit-bom:${junitVersion}"
    testImplementation("org.junit.jupiter:junit-jupiter")

    // BDD dependencies
    integrationTestImplementation "io.cucumber:cucumber-java8:${cucmberVersion}"
    integrationTestImplementation "io.cucumber:cucumber-junit:${cucmberVersion}"
    implementation group: "io.cucumber", name: "cucumber-spring", version: "${cucmberVersion}"
    integrationTestImplementation "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}

// Cucumber Settings
configurations {
    cucumberRuntime.extendsFrom implementation
}

// BDD task
task integrationTest(type: Test) {
    group = 'verification'
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn assemble, testClasses
    outputs.upToDateWhen { false }
    mustRunAfter test
    doLast {
        javaexec {
            main "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.integrationTest.runtimeClasspath
            args = [
                    "--plugin", "pretty",
                    "--plugin", "json:build/bdd-reports/cucumber-reports.json",
                    "--plugin", "html:build/bdd-reports/index.html",
                    "--plugin", "junit:build/bdd-reports/feature-overview.html",
                    "--glue", "com.hnp.iot.ingestion.bdd.steps",
                    "src/integ-test/resources"
            ]
        }
    }
}
